name: yolo-core CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  ubuntu-vcpkg:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Update apt
        run: sudo apt update
      
      - name: Install dependencies
        run: sudo apt install yasm
      
      - uses: lukka/get-cmake@latest
      
      - name: Restore from cache and run vcpkg
        env:
          vcpkgResponseFile: ${{ github.workspace }}/cmake/vcpkg_linux.diff
        uses: lukka/run-vcpkg@v2
        with:
          vcpkgArguments: '@${{ env.vcpkgResponseFile }}'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: 'aa0b9d7ca9e1b98e7bb18538f04dd39e7a41d3ff'
          appendedCacheKey: ${{ hashFiles(env.vcpkgResponseFile) }}
      
      - name: Build with CMake and Ninja
        uses: lukka/run-cmake@v2
        with:
          cmakeListOrSettingJson: CMakeListTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ runner.workspace }}/build'
          cmakeBuildType: 'Release'
          buildWithCMakeArgs: '--target install'
      
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-vcpkg
          path: ${{ runner.workspace }}/build/install/bin

  ubuntu-cuda-vcpkg:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Update apt
        run: sudo apt update
      
      - name: Install dependencies
        run: sudo apt install yasm
      
      - uses: lukka/get-cmake@latest

      - name: 'Install CUDA'
        run: |
          wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.2.89-1_amd64.deb
          sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
          sudo dpkg -i cuda-repo-ubuntu1804_10.2.89-1_amd64.deb
          wget http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb
          sudo dpkg -i nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb
          sudo apt update
          sudo apt-get install -y --no-install-recommends cuda-compiler-10-2 cuda-libraries-dev-10-2 cuda-driver-dev-10-2 cuda-cudart-dev-10-2 cuda-curand-dev-10-2
          sudo apt-get install -y --no-install-recommends libcudnn7-dev
          sudo ln -s /usr/local/cuda-10.2/lib64/stubs/libcuda.so /usr/local/cuda-10.2/lib64/stubs/libcuda.so.1
      
      - name: Restore from cache and run vcpkg
        env:
          vcpkgResponseFile: ${{ github.workspace }}/cmake/vcpkg_linux.diff
        uses: lukka/run-vcpkg@v2
        with:
          vcpkgArguments: '@${{ env.vcpkgResponseFile }}'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: 'aa0b9d7ca9e1b98e7bb18538f04dd39e7a41d3ff'
          appendedCacheKey: ${{ hashFiles(env.vcpkgResponseFile) }}
      
      - name: Build with CMake and Ninja
        uses: lukka/run-cmake@v2
        with:
          cmakeListOrSettingJson: CMakeListTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ runner.workspace }}/build'
          cmakeBuildType: 'Release'
          buildWithCMakeArgs: '--target install'
          
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-cuda-vcpkg
          path: ${{ runner.workspace }}/build/install/bin
  
  windows-vcpkg:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      
      - uses: lukka/get-cmake@latest
      
      - name: Restore from cache and run vcpkg
        env:
          vcpkgResponseFile: ${{ github.workspace }}/cmake/vcpkg_windows.diff
        uses: lukka/run-vcpkg@v2
        with:
          vcpkgArguments: '@${{ env.vcpkgResponseFile }}'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: 'aa0b9d7ca9e1b98e7bb18538f04dd39e7a41d3ff'
          appendedCacheKey: ${{ hashFiles(env.vcpkgResponseFile) }}
      
      - name: Build with CMake and Ninja
        uses: lukka/run-cmake@v2
        with:
          cmakeListOrSettingJson: CMakeListTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ runner.workspace }}/build'
          cmakeBuildType: 'Release'
          buildWithCMakeArgs: '--target install'
      
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-vcpkg
          path: ${{ runner.workspace }}/build/install/bin

  windows-cuda-vcpkg:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      
      - uses: lukka/get-cmake@latest
      
      - name: Restore from cache and run vcpkg
        env:
          vcpkgResponseFile: ${{ github.workspace }}/cmake/vcpkg_windows_cuda.diff
        uses: lukka/run-vcpkg@v2
        with:
          vcpkgArguments: '@${{ env.vcpkgResponseFile }}'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: 'aa0b9d7ca9e1b98e7bb18538f04dd39e7a41d3ff'
          appendedCacheKey: ${{ hashFiles(env.vcpkgResponseFile) }}
      
      - name: Build with CMake and Ninja
        uses: lukka/run-cmake@v2
        with:
          cmakeListOrSettingJson: CMakeListTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ runner.workspace }}/build'
          cmakeBuildType: 'Release'
          buildWithCMakeArgs: '--target install'
      
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-cuda-vcpkg
          path: ${{ runner.workspace }}/build/install/bin